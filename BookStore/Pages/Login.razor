@page "/"


@layout LoginLayout
@using DataAccessLib
@using BookStore.Models

@using Microsoft.Extensions.Configuration
@inject NavigationManager munav
@inject sessionstate state
@inject IDataAccess _data
@inject IConfiguration _config

<!-- Button to open the modal login form -->
<button onclick="document.getElementById('id01').style.display='block'">Login</button><span></span>
<button onclick="document.getElementById('id02').style.display='block'">Sign Up</button>


<!-- The Modal -->
<div id="id01" class="modal">
  <span onclick="document.getElementById('id01').style.display='none'"
class="close" title="Close Modal">&times;</span>

  <!-- Modal Content -->
  <EditForm class="modal-content animate" Model="@model" OnInvalidSubmit="Submit">
  
<EditForm class="modal-content animate" Model="@users" OnInvalidSubmit="LoginMethod">
    @if (logger)
    {
    <div class="container">
      <label for="email"><b>Email</b></label>
      <input type="text" placeholder="Enter Email" name="email" @bind-value = "@model.Email" required>
      <input type="text" placeholder="Enter Email" name="email" @bind-value = "@users.Email" required>

      <label for="psw"><b>Password</b></label>
      <input type="password" placeholder="Enter Password" name="psw" @bind-value = "@model.Password" required>
      <input type="password" placeholder="Enter Password" name="psw" @bind-value = "@users.Password" required>

      <button type="submit">Login</button>
      <label>
        <input type="checkbox" checked="checked" name="remember"> Remember me
      </label>
    </div>

}
    <div class="container" style="background-color:#f1f1f1">
      <button type="button" onclick="document.getElementById('id01').style.display='none'" class="cancelbtn">Cancel</button>
      <span class="psw"><a href="signup">Sign Up</a></span>
    </div>
  </EditForm >
  
</div>

<div id="id02" class="modal">
    <EditForm Model="@model" OnInvalidSubmit="Insert">
      
        <EditForm Model="@users" OnInvalidSubmit="Insert">
      <span onclick="document.getElementById('id02').style.display='none'"class="close" title="Close Modal">&times;</span>
  <div class="container">
    <h1>Register</h1>
            
    <p>Please fill in this form to create an account.</p>
    <hr>

    <label for="email"><b>Email</b></label>
    <input type="text" placeholder="Enter Email" name="email" id="email" required>

                    <input type="text" placeholder="Enter Email" name="email" id="email" @bind-value="users.Email" required>
    <label for="psw"><b>Password</b></label>
    <input type="password" placeholder="Enter Password" name="psw" id="psw" required>

                    <input type="password" placeholder="Enter Password" name="psw" id="psw" @bind-value="users.Password" required>
    <p>By creating an account you agree to our <a href="#">Terms & Privacy</a>.</p>
    <button type="submit" class="registerbtn">Register</button>
  </div>

  <div class="container signin">
    <div class="container" style="background-color:#f1f1f1">
      <button type="button" onclick="document.getElementById('id02').style.display='none'" class="cancelbtn">Cancel</button>
      <span class="psw"><a href="signup">Sign Up</a></span>
    </div>
    <p>Already have an account? <a href="/">Sign in</a>.</p>
    <p>Already have an account? <button>Sign in</button></p>
  </div>
  </EditForm>
  
</div>
@code {
    Users model = new Users();
    static List<Users> users = new List<Users>();
    string message;
    private void Submit()
    Users users = new Users();
    static List<Users> staticuser = new List<Users>();
    List<Users> ?user;
    string ? message;


    private void LoginMethod()
    {
        if(users.Any(a=>a.Email.Equals(model.Email) && a.Password.Equals(model.Password)))
        if(staticuser.Any(a=>a.Email.Equals(users.Email) && a.Password.Equals(users.Password)))
        {
            state.email = model.Email;
            state.email = users.Email;
            munav.NavigateTo("/Index");
        }
        else
        { 
            message = "Wrong entries checkout details!";
        }
    }
    private void Insert()
    bool logger = true;
    bool createUser = true;
    bool editUser = false;
    private async Task Insert()
    {
        string sql = "INSERT INTO `products_db`.`users_tb`(`email`,`password`)(@email,@password)";
        Users c = new Users()
    {
        
            Email = users.Email,
            Password = users.Password
        };
        await _data.SaveData(sql,c, _config.GetConnectionString("DbConnection"));
        await OnInitializedAsync();
    }
}
